/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.form;

import java.util.ArrayList;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.text.DecimalFormat;
import BUS.SanphamBUS;
import DTO.SanphamDTO;
import GUI.component.SanPham.AddUpdateSanPham;

/**
 *
 * @author mrben
 */
public class Form_Sanpham extends javax.swing.JPanel {
    public SanphamBUS sanphamBUS;
    private Object selectedMaSanPham;

    /**
     * Creates new form Form_Sanpham
     */
    public Form_Sanpham() {
        initComponents();
        sanphamBUS = new SanphamBUS();

        loadSanPhamTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSanPham = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        txtTimKiem = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnLamMoi = new javax.swing.JButton();
        btnChiTiet = new javax.swing.JButton();
        btnXuatExcel = new javax.swing.JButton();
        btnThemMoi = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(752, 448));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("QUẢN LÝ SẢN PHẨM");

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách sản phẩm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        tblSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SP", "Tên sản phẩm", "Loại SP", "Chip", "Card", "RAM", "Giá bán", "Số lượng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSanPhamMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSanPham);

        jLabel8.setText("Tìm kiếm:");

        btnTimKiem.setText("Tìm kiếm");
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        btnSua.setBackground(new java.awt.Color(255, 204, 0));
        btnSua.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSua.setForeground(new java.awt.Color(255, 255, 255));
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnXoa.setBackground(new java.awt.Color(255, 51, 51));
        btnXoa.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnXoa.setForeground(new java.awt.Color(255, 255, 255));
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnLamMoi.setBackground(new java.awt.Color(102, 102, 102));
        btnLamMoi.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLamMoi.setForeground(new java.awt.Color(255, 255, 255));
        btnLamMoi.setText("Làm mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        btnChiTiet.setBackground(new java.awt.Color(0, 102, 204));
        btnChiTiet.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnChiTiet.setForeground(new java.awt.Color(255, 255, 255));
        btnChiTiet.setText("Xem chi tiết");

        btnXuatExcel.setBackground(new java.awt.Color(0, 153, 51));
        btnXuatExcel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnXuatExcel.setForeground(new java.awt.Color(255, 255, 255));
        btnXuatExcel.setText("Xuất Excel");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnTimKiem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnXuatExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnChiTiet, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTimKiem)
                    .addComponent(btnXuatExcel))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChiTiet, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        btnThemMoi.setBackground(new java.awt.Color(0, 204, 204));
        btnThemMoi.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnThemMoi.setForeground(new java.awt.Color(255, 255, 255));
        btnThemMoi.setText("Thêm mới");
        btnThemMoi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnThemMoiMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnThemMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnThemMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        String searchText = txtTimKiem.getText().trim();

        if (searchText.isEmpty()) {
            // Nếu ô tìm kiếm trống, hiển thị tất cả sản phẩm
            loadSanPhamTable();
            return;
        }

        // Tìm kiếm sản phẩm theo mã hoặc tên
        searchSanPham(searchText);
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnSuaActionPerformed
        if (selectedMaSanPham != null) {
            AddUpdateSanPham form = new AddUpdateSanPham();

            // Lấy thông tin khách hàng cần cập nhật
            SanphamDTO sp = sanphamBUS.getSanphamById(selectedMaSanPham.toString());

            if (sp != null) {
                // Đổ dữ liệu vào form
                form.setDataForUpdate(sp);

                // Disable trường mã sản phẩm
                form.disableFieldForUpdate();

                // Thêm WindowListener để biết khi nào form đóng
                form.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                        // Load lại dữ liệu vào bảng khi form đóng
                        loadSanPhamTable();
                    }
                });

                form.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(
                        this,
                        "Không tìm thấy thông tin sản phẩm!",
                        "Lỗi",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(
                    this,
                    "Vui lòng chọn sản phẩm cần cập nhật!",
                    "Thông báo",
                    JOptionPane.WARNING_MESSAGE);
        }
    }// GEN-LAST:event_btnSuaActionPerformed

    private void tblSanPhamMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_tblSanPhamMouseClicked
        int selectedRow = tblSanPham.getSelectedRow();
        if (selectedRow >= 0) {
            // Lấy giá trị ở cột 0 (cột đầu tiên) của hàng được chọn
            String maSanPham = tblSanPham.getValueAt(selectedRow, 0).toString();

            // Lưu mã SP vào biến để sử dụng cho các thao tác khác
            selectedMaSanPham = maSanPham;
        }
    }// GEN-LAST:event_tblSanPhamMouseClicked

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnXoaActionPerformed
        if (selectedMaSanPham != null) {
            // Hiển thị hộp thoại xác nhận
            int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "Bạn có chắc chắn muốn xóa sản phẩm này?",
                    "Xác nhận xóa",
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                // Thực hiện xóa sản phẩm thông qua BUS
                boolean success = sanphamBUS.DeleteSanpham(selectedMaSanPham.toString());

                if (success) {
                    JOptionPane.showMessageDialog(
                            this,
                            "Xóa sản phẩm thành công!",
                            "Thông báo",
                            JOptionPane.INFORMATION_MESSAGE);

                    // Cập nhật lại bảng
                    loadSanPhamTable();

                    // Reset biến lưu mã sản phẩm
                    selectedMaSanPham = null;

                } else {
                    JOptionPane.showMessageDialog(
                            this,
                            "Xóa sản phẩm thất bại! Sản phẩm có thể đang được sử dụng trong hệ thống.",
                            "Lỗi",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(
                    this,
                    "Vui lòng chọn sản phẩm cần xóa!",
                    "Thông báo",
                    JOptionPane.WARNING_MESSAGE);
        }
    }// GEN-LAST:event_btnXoaActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnLamMoiActionPerformed
        // Xóa nội dung ô tìm kiếm
        txtTimKiem.setText("");

        // Reload dữ liệu từ database
        loadSanPhamTable();

        // Thông báo cho người dùng
        System.out.println("Đã làm mới danh sách sản phẩm");
    }// GEN-LAST:event_btnLamMoiActionPerformed

    private void loadSanPhamTable() {
        // Gọi phương thức để cập nhật danh sách từ database
        this.sanphamBUS.ListSanpham();

        DefaultTableModel model = (DefaultTableModel) tblSanPham.getModel();
        model.setRowCount(0); // Xóa tất cả dữ liệu hiện có

        ArrayList<SanphamDTO> listSanpham = sanphamBUS.getList();

        // Kiểm tra xem danh sách có dữ liệu không
        if (listSanpham == null || listSanpham.isEmpty()) {
            System.out.println("Danh sách sản phẩm trống");
            return;
        }

        // format giá bán
        DecimalFormat formatter = new DecimalFormat("#,###");
        // In ra console để debug
        System.out.println("Số lượng sản phẩm: " + listSanpham.size());

        for (SanphamDTO sp : listSanpham) {
            Object[] row = new Object[8];
            row[0] = sp.getMa_sp();
            row[1] = sp.getTenSP();
            row[2] = sp.getMa_loai();
            row[3] = sp.getChip();
            row[4] = sp.getCard();
            row[5] = sp.getRam();
            // format giá bán
            row[6] = formatter.format(sp.getGia_ban());
            row[7] = sp.getSo_luong_ton();
            model.addRow(row);
        }

        // Tạo renderer để căn giữa nội dung trong các cột
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        tblSanPham.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblSanPham.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        tblSanPham.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        tblSanPham.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
    }

    private void btnThemMoiMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_btnThemMoiMouseClicked
        AddUpdateSanPham form = new AddUpdateSanPham();

        // Thêm WindowListener để biết khi nào form đóng
        form.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                // Load lại dữ liệu vào bảng khi form đóng
                loadSanPhamTable();
            }
        });

        form.setVisible(true);
    }// GEN-LAST:event_btnThemMoiMouseClicked


    // Thêm phương thức tìm kiếm sản phẩm
    private void searchSanPham(String keyword) {
        // Đảm bảo danh sách sản phẩm đã được cập nhật
        sanphamBUS.ListSanpham();

        // Lấy danh sách sản phẩm từ BUS
        ArrayList<SanphamDTO> listSanpham = sanphamBUS.getList();
        ArrayList<SanphamDTO> searchResult = new ArrayList<>();

        // Tìm kiếm sản phẩm theo mã hoặc tên (không phân biệt hoa thường)
        keyword = keyword.toLowerCase();

        for (SanphamDTO sp : listSanpham) {
            if (sp.getMa_sp().toLowerCase().contains(keyword) ||
                    sp.getTenSP().toLowerCase().contains(keyword)) {
                searchResult.add(sp);
            }
        }

        // Hiển thị kết quả tìm kiếm
        displaySearchResult(searchResult);
    }

    // Thêm phương thức hiển thị kết quả tìm kiếm
    private void displaySearchResult(ArrayList<SanphamDTO> searchResult) {
        DefaultTableModel model = (DefaultTableModel) tblSanPham.getModel();
        model.setRowCount(0); // Xóa tất cả dữ liệu hiện có

        // Kiểm tra xem danh sách kết quả có dữ liệu không
        if (searchResult == null || searchResult.isEmpty()) {
            System.out.println("Không tìm thấy sản phẩm phù hợp");
            JOptionPane.showMessageDialog(
                    this,
                    "Không tìm thấy sản phẩm phù hợp với từ khóa: " + txtTimKiem.getText(),
                    "Thông báo",
                    JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Format giá bán
        DecimalFormat formatter = new DecimalFormat("#,###");

        // Hiển thị kết quả tìm kiếm
        for (SanphamDTO sp : searchResult) {
            Object[] row = new Object[8];
            row[0] = sp.getMa_sp();
            row[1] = sp.getTenSP();
            row[2] = sp.getMa_loai();
            row[3] = sp.getChip();
            row[4] = sp.getCard();
            row[5] = sp.getRam();
            row[6] = formatter.format(sp.getGia_ban());
            row[7] = sp.getSo_luong_ton();
            model.addRow(row);
        }

        // Thông báo số lượng kết quả tìm thấy
        System.out.println("Tìm thấy " + searchResult.size() + " sản phẩm phù hợp");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChiTiet;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThemMoi;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXuatExcel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblSanPham;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables
}
